__version__ = (1, 0, 0)

#
#     d88P     d88P          888b    888          888
#      d88P   d88P           8888b   888          888
#       d88P d88P            88888b  888          888
#        d88888P    888888   888Y88b 888  .d88b.  888888
#        d88888P    888888   888 Y88b888 d8P  Y8b 888
#       d88P d88P            888  Y88888 88888888 888
#      d88P   d88P           888   Y8888 Y8b.     Y88b.
#     d88P     d88P          88.8    Y888  "Y8888   "Y888
#
#                      ¬© Copyright 2022
#                    https:// x-net.pp.ua
#
#                 Licensed under the GNU GPLv3
#          https:// www.gnu.org/licenses/agpl-3.0.html
#

# meta developer: @zxcghost666
# scope: hikka_only
# scope: hikka_min 1.2.10
import asyncio
import datetime
import logging
import random

from telethon import types, functions
from telethon.tl.types import UpdateUserStatus

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class FakeOnlineMod(loader.Module):
    """–§–µ–π–∫–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω"""

    strings = {"name": "FakeOnline"}
    strings_ru = {"_cls_doc": "–§–µ–π–∫–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω"}
    last_online = 0         # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω (timestamp)
    next_morning = 37000    # –ö–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è (timestamp)
    next_night = 86300      # –ö–æ–≥–¥–∞ –ª–µ—á—å —Å–ø–∞—Ç—å (timestamp)
    user_online = True      # –û–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    online_count = 0        # –ü–æ–¥—Å—á–µ—Ç –≤—ã—Ö–æ–¥–æ–≤ –≤ –æ–Ω–ª–∞–π–Ω
    online_per = 1 * 60     # –í—ã—Ö–æ–¥–∏—Ç—å –≤ –æ–Ω–ª–∞–π–Ω –∫–∞–∂–¥—ã–µ

    async def client_ready(self, client, db) -> None:
        self.client = client
        self.me = await client.get_me()
        self.uid = self.me.id
        self.chat, _ = await utils.asset_channel(
            client, "[–§–µ–π–∫–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω]",
            "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–µ–π–∫–æ–≤–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞",
            channel=False, silent=True, archive=True
        )

    async def go_online(self, now=None):
        """ –í—ã—Ö–æ–¥–∏–º –≤ –æ–Ω–ª–∞–π–Ω """
        if now is None:  # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—Ä–µ–º—è
            now = datetime.datetime.now()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç
        await self.client.send_message(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            self.chat, f'<emoji document_id="5818967120213445821">üõ°</emoji> <b>–í—ã—à–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω</b>\n<emoji document_id='
                       f'"5818865088970362886">‚ùï</emoji> <code>{now.strftime("%H:%M:%S.%f")[:-3]}</code>'
        )
        await self.client(functions.account.UpdateStatusRequest(offline=False))  # –í—ã—Ö–æ–¥–∏–º –≤ –æ–Ω–ª–∞–π–Ω –µ—â—ë —Ä–∞–∑
        self.last_online = now.timestamp()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞
        logger.info('–í—ã—à–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ go_online(). '
                    f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')
        return now  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è

    async def go_offline(self, now=None):
        """ –í—ã—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω """
        if now is None:     # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—Ä–µ–º—è
            now = datetime.datetime.now()   # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç
        await self.client(functions.account.UpdateStatusRequest(offline=True))     # –í—ã—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω
        logger.info('–í—ã—à–ª–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ go_offline(). '
                    f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')
        return now  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è

    async def fakeonlinecmd(self, message: types.Message):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è """
        now = datetime.datetime.now()
        seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds()
        text = f'–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n' \
               f'–°–µ–π—á–∞—Å —Ñ–µ–π–∫-–æ–Ω–ª–∞–π–Ω '
        if self.next_morning < seconds_since_midnight < self.next_night:
            text += '–∞–∫—Ç–∏–≤–µ–Ω\n'
        else:
            text += '—Å–ø–∏—Ç\n'
        text += f'last_online: {self.last_online}\n' \
                f'user_online: {self.user_online}'
        await utils.answer(message, text)

    @loader.loop(interval=5, autostart=True, wait_before=True)
    async def scheduler(self) -> None:
        if self.user_online is True:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            return

        now = datetime.datetime.now()
        seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds()

        if self.next_morning > seconds_since_midnight > self.next_night:
            # –ï—Å–ª–∏ –º—ã —Å–ø–∏–º ‚Äì –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            return

        if self.last_online + self.online_per <= now.timestamp():
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞ + –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ 3 –º–∏–Ω—É—Ç—ã –º–µ–Ω—å—à–µ —á–µ–º –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å ‚Äì –≤—ã—Ö–æ–¥–∏–º –≤ –æ–Ω–ª–∞–π–Ω
            rnd = random.randrange(10)
            if rnd > 2:
                await self.go_online()
                logger.info(f'–°–∫—Ä–∏–ø—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω —Å —à–∞–Ω—Å–æ–º {rnd}. '
                            f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')
            else:
                self.last_online = now.timestamp() + random.randrange(3500)
                await self.go_offline()
                logger.info(f'–°–∫—Ä–∏–ø—Ç –ù–ï –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω —Å —à–∞–Ω—Å–æ–º {rnd}. '
                            f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')

    @loader.raw_handler(UpdateUserStatus)
    async def update_handler(self, update: UpdateUserStatus):

        if update.user_id == self.uid and type(update.status) == types.UserStatusOffline:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω
            self.user_online = False
            await self.go_online()
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω. '
                        f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')

        elif update.user_id == self.uid and type(update.status) == types.UserStatusOnline:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω
            self.user_online = True
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω. '
                        f'last_online = {datetime.datetime.fromtimestamp(self.last_online)}')
